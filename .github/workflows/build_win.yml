name: build wheels for windows

on:
  push:
    branches:
      - master

jobs:
  build:

    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [windows-latest]
        architecture: [x64] #, x86]
        python-version: [3.6, 3.7, 3.8]

    steps:
    - uses: actions/checkout@v2

    - name: Cache conda
      uses: actions/cache@v2
      env:
        CACHE_NUMBER: 0  # Invalidate cache by changing this number
      with:
        path: ~\Miniconda\envs
        key: mmf-cpu-${{ matrix.platform }}-python${{ matrix.python-version }}-${{ env.CACHE_NUMBER }}-${{ hashFiles('**/requirements.txt') }}-${{ hashFiles('**/setup.py') }}

    - name: Cache pip
      uses: actions/cache@v2
      with:
        path: ~\AppData\Local\pip\Cache
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install miniconda
      uses: goanpeca/setup-miniconda@v1
      with:
        python-version: ${{ matrix.python-version }}
        channels: conda-forge

    - name: Install conda packages and build wheel
      shell: bash -l {0}
      run: |
        conda update -n base -c defaults conda
        conda install numpy fftw pip
        pip install --upgrade pip wheel auditwheel
        pip install -r ./python/dev-requirements.txt
        # find "C:\ProgramData" -name "*msvcr*"
        # find "${CONDA_PREFIX}" -name "*msvcr*"
        # find "${CONDA_PREFIX}" -name "*fftw3*"
        # "C:\ProgramData\Chocolatey\bin\gcc.exe" --help || true
        # "C:/ProgramData/Chocolatey/bin/gcc.exe" --help || true
        # gcc.exe --help || true
        echo "Messing with the paths:"
        gcc.exe -print-libgcc-file-name || true
        ln -s `gcc.exe -print-libgcc-file-name` "libmsvcr140.a" || true
        export LIBRARY_PATH="C:\Miniconda\envs\test/Library/lib;C:\Miniconda\envs\test/Library/bin;${PWD}"
        echo "LIBRARY_PATH=_${LIBRARY_PATH}_"
        export CPATH="C:\Miniconda\envs\test/Library/include"
        #python setup.py build  # Uses MSVC, which doesn't understand fftw_complex
        #python setup.py build --compiler=gcc  # Doesn't know how to work on nt
        #CC=gcc python setup.py build  # Just uses MSVC
        #python setup.py build --compiler=mingw-w64  # Doesn't know how to work on nt
        python setup.py build --compiler=mingw32
        python setup.py install

    - name: Upload wheel
      uses: actions/upload-artifact@v1
      with:
        name: dist_${{ matrix.os }}_${{ matrix.architecture }}_${{ matrix.python-version }}
        path: dist

    - name: Publish to PyPI
      env:
        PYPI_USERNAME: __token__
        PYPI_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
      run: |
        pip install twine
        python -m twine upload -u ${PYPI_USERNAME} -p ${PYPI_PASSWORD} dist/*
      shell: bash -l {0}
